
mspacek@Godel:~/SciPyCourse2019/notes/06_fileio_mpl$ ipython
Python 3.6.7 (default, Oct 22 2018, 11:32:17)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.4.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: l = [3, 5, 1.7, -2.7, 1e2, -50]

In [2]: l
Out[2]: [3, 5, 1.7, -2.7, 100.0, -50]

In [3]: a = np.array(l)

In [4]: a
Out[4]: array([  3. ,   5. ,   1.7,  -2.7, 100. , -50. ])

In [5]: a.nbytes
Out[5]: 48

In [6]: a.dtype
Out[6]: dtype('float64')

In [7]: np.iinfo(np.int8)
Out[7]: iinfo(min=-128, max=127, dtype=int8)

In [8]: 2**16
Out[8]: 65536

In [9]: np.iinfo(np.int16)
Out[9]: iinfo(min=-32768, max=32767, dtype=int16)

In [10]: np.iinfo(np.int32)
Out[10]: iinfo(min=-2147483648, max=2147483647, dtype=int32)

In [11]: np.finfo(np.float16)
Out[11]: finfo(resolution=0.001, min=-6.55040e+04, max=6.55040e+04, dtype=float16)

In [12]: np.float16(1.001)
Out[12]: 1.001

In [13]: np.float16(1.0001)
Out[13]: 1.0

In [14]: np.float16(1.0005)
Out[14]: 1.001

In [15]: np.float16(1.0004)
Out[15]: 1.0

In [16]: np.inf
Out[16]: inf

In [17]: 1 / np.zeros(10)
/usr/local/bin/ipython:1: RuntimeWarning: divide by zero encountered in true_divide
  #!/usr/bin/python3
Out[17]: array([inf, inf, inf, inf, inf, inf, inf, inf, inf, inf])

In [18]: -np.inf
Out[18]: -inf

In [19]: np.sqrt(-1)
/usr/local/bin/ipython:1: RuntimeWarning: invalid value encountered in sqrt
  #!/usr/bin/python3
Out[19]: nan

In [20]: np.nan + np.nan
Out[20]: nan

In [21]: np.nan == np.nan
Out[21]: False

In [22]: np.sqrt([-1, -1, -1])
/usr/local/bin/ipython:1: RuntimeWarning: invalid value encountered in sqrt
  #!/usr/bin/python3
Out[22]: array([nan, nan, nan])

In [23]: np.array([np.nan, 1, 2])
Out[23]: array([nan,  1.,  2.])

In [24]: np.isnan(np.array([np.nan, 1, 2]))
Out[24]: array([ True, False, False])

In [25]: ['', 'a', 'b', 1, 2]
Out[25]: ['', 'a', 'b', 1, 2]

In [26]: [None, 'a', 'b', 1, 2]
Out[26]: [None, 'a', 'b', 1, 2]

In [27]: np.array([None, 1, 2])
Out[27]: array([None, 1, 2], dtype=object)

In [28]: np.loadtxt?

In [29]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  test2D.csv  V.npy
06_fileio_mpl.pdf  anatomy.pdf  test1D.csv                  t.npy       Vt.mat

In [30]: np.loadtxt('test1D.csv')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-30-29c15928915b> in <module>
----> 1 np.loadtxt('test1D.csv')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
   1132         # converting the data
   1133         X = None
-> 1134         for x in read_data(_loadtxt_chunksize):
   1135             if X is None:
   1136                 X = np.array(x, dtype)

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in floatconv(x)
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ValueError: could not convert string to float: '0,1,2,3,4,5,6,7,8,9'
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(768)floatconv()
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ipdb> c

In [31]: np.loadtxt('test1D.csv', delimiter=',')
Out[31]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [32]: a = np.loadtxt('test1D.csv', delimiter=',')

In [33]: a.dtype
Out[33]: dtype('float64')

In [34]: np.loadtxt?

In [35]: a = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [36]: a
Out[36]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [37]: a = np.loadtxt('test1D.csv', delimiter=',', dtype=np.int)

In [38]: a
Out[38]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [39]: a = np.loadtxt('test1D.csv', delimiter=',', dtype=np.int32)

In [40]: a
Out[40]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32)

In [41]: int
Out[41]: int

In [42]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  test2D.csv  V.npy
06_fileio_mpl.pdf  anatomy.pdf  test1D.csv                  t.npy       Vt.mat

In [43]: a = np.loadtxt('test2D.csv', delimiter=',')

In [44]: a
Out[44]:
array([[1., 2., 3.],
       [4., 5., 6.],
       [7., 8., 9.]])

In [45]: a = np.loadtxt('test2D.csv', delimiter=',')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-45-ffa1aed5bc14> in <module>
----> 1 a = np.loadtxt('test2D.csv', delimiter=',')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
   1132         # converting the data
   1133         X = None
-> 1134         for x in read_data(_loadtxt_chunksize):
   1135             if X is None:
   1136                 X = np.array(x, dtype)

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1056                 line_num = i + skiprows + 1
   1057                 raise ValueError("Wrong number of columns at line %d"
-> 1058                                  % line_num)
   1059
   1060             # Convert each value according to its column and store

ValueError: Wrong number of columns at line 2
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(1058)read_data()
   1056                 line_num = i + skiprows + 1
   1057                 raise ValueError("Wrong number of columns at line %d"
-> 1058                                  % line_num)
   1059
   1060             # Convert each value according to its column and store

ipdb> c

In [46]: a = np.loadtxt('test2D.csv', delimiter=',')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-46-ffa1aed5bc14> in <module>
----> 1 a = np.loadtxt('test2D.csv', delimiter=',')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
   1132         # converting the data
   1133         X = None
-> 1134         for x in read_data(_loadtxt_chunksize):
   1135             if X is None:
   1136                 X = np.array(x, dtype)

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in floatconv(x)
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ValueError: could not convert string to float:
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(768)floatconv()
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ipdb> c

In [47]: a = np.loadtxt('test2D.csv', delimiter=',')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-47-ffa1aed5bc14> in <module>
----> 1 a = np.loadtxt('test2D.csv', delimiter=',')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
   1132         # converting the data
   1133         X = None
-> 1134         for x in read_data(_loadtxt_chunksize):
   1135             if X is None:
   1136                 X = np.array(x, dtype)

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in floatconv(x)
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ValueError: could not convert string to float:
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(768)floatconv()
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ipdb> c

In [48]: a = np.loadtxt('test2D.csv', delimiter=',')

In [49]: a
Out[49]:
array([[ 1.,  2.,  3.],
       [ 4., nan,  6.],
       [ 7.,  8.,  9.]])

In [50]: a = np.loadtxt('test2D.csv', delimiter=',')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-50-ffa1aed5bc14> in <module>
----> 1 a = np.loadtxt('test2D.csv', delimiter=',')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
   1132         # converting the data
   1133         X = None
-> 1134         for x in read_data(_loadtxt_chunksize):
   1135             if X is None:
   1136                 X = np.array(x, dtype)

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in read_data(chunk_size)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in <listcomp>(.0)
   1059
   1060             # Convert each value according to its column and store
-> 1061             items = [conv(val) for (conv, val) in zip(converters, vals)]
   1062
   1063             # Then pack it according to the dtype's nesting

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in floatconv(x)
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ValueError: could not convert string to float: 'a'
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(768)floatconv()
    766         if '0x' in x:
    767             return float.fromhex(x)
--> 768         return float(x)
    769
    770     typ = dtype.type

ipdb> c

In [51]: np.loadtxt?

In [52]: a = np.loadtxt('test2D.csv', delimiter=',', dtype=str)

In [53]: a
Out[53]:
array([['a', 'b', 'c', 'd'],
       ['e', 'f', 'g', 'h']], dtype='<U1')

In [54]: a
Out[54]:
array([['a', 'b', 'c', 'd'],
       ['e', 'f', 'g', 'h']], dtype='<U1')

In [55]: a = np.loadtxt('test2D.csv', delimiter=',', dtype=int)

In [56]: a
Out[56]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [57]: np.savetxt?

In [58]: np.savetxt('twoD.txt', a)

In [59]: a
Out[59]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [60]: a.dtype
Out[60]: dtype('int64')

In [61]: np.savetxt?

In [62]: np.savetxt('twoD.txt', a, fmt='%g')

In [63]: np.savetxt?

In [64]: np.savetxt('twoD.txt', a, fmt='%g', delimiter=',')

In [65]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  test2D.csv  twoD.txt  Vt.mat
06_fileio_mpl.pdf  anatomy.pdf  test1D.csv                  t.npy       V.npy

In [66]: test1D = np.loadtxt('test1D.txt', delimiter=',')
---------------------------------------------------------------------------
OSError                                   Traceback (most recent call last)
<ipython-input-66-f3a63bca2228> in <module>
----> 1 test1D = np.loadtxt('test1D.txt', delimiter=',')

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in loadtxt(fname, dtype, comments, delimiter, converters, skiprows, usecols, unpack, ndmin, encoding, max_rows)
    953             fname = os_fspath(fname)
    954         if _is_string_like(fname):
--> 955             fh = np.lib._datasource.open(fname, 'rt', encoding=encoding)
    956             fencoding = getattr(fh, 'encoding', 'latin1')
    957             fh = iter(fh)

/usr/local/lib/python3.6/dist-packages/numpy/lib/_datasource.py in open(path, mode, destpath, encoding, newline)
    264
    265     ds = DataSource(destpath)
--> 266     return ds.open(path, mode, encoding=encoding, newline=newline)
    267
    268

/usr/local/lib/python3.6/dist-packages/numpy/lib/_datasource.py in open(self, path, mode, encoding, newline)
    622                                       encoding=encoding, newline=newline)
    623         else:
--> 624             raise IOError("%s not found." % path)
    625
    626

OSError: test1D.txt not found.
> /usr/local/lib/python3.6/dist-packages/numpy/lib/_datasource.py(624)open()
    622                                       encoding=encoding, newline=newline)
    623         else:
--> 624             raise IOError("%s not found." % path)
    625
    626

ipdb> c

In [67]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  test2D.csv  twoD.txt  Vt.mat
06_fileio_mpl.pdf  anatomy.pdf  test1D.csv                  t.npy       V.npy

In [68]: test1D = np.loadtxt('test1D.csv', delimiter=',')

In [69]: test1D
Out[69]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [70]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [71]: test1D
Out[71]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [72]: np.savetxt('test1D.txt', test1D, delimiter=',', fmt='%g')

In [73]: np.savetxt?

In [74]: np.savetxt('test1D.txt', test1D, delimiter=',', fmt='%g', newline='')

In [75]: np.savetxt('test1D.txt', test1D, delimiter=',', fmt='%g', newline=',')

In [76]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  test1D.txt  t.npy     V.npy
06_fileio_mpl.pdf  anatomy.pdf  test1D.csv                  test2D.csv  twoD.txt  Vt.mat

In [77]: np.load('V.npy')
Out[77]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [78]: np.load('V.npy').dtype
Out[78]: dtype('float64')

In [79]: V = np.load('V.npy')

In [80]: t = np.load('t.npy')

In [81]: t
Out[81]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [82]: t.dtype
Out[82]: dtype('int64')

In [83]: 2*v
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-83-9430c5c4cda0> in <module>
----> 1 2*v

NameError: name 'v' is not defined
> <ipython-input-83-9430c5c4cda0>(1)<module>()
----> 1 2*v

ipdb> c

In [84]: 2*V
Out[84]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [85]: np.save('V2.npy', 2*V)

In [86]: v2new = np.load('V2.npy')

In [87]: v2new
Out[87]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [88]: V
Out[88]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [89]: V
Out[89]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [90]: V
Out[90]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [91]: v2new
Out[91]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [92]: V
Out[92]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [93]: v2new
Out[93]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [94]: V
Out[94]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [95]: v2new
Out[95]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [96]: V
Out[96]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [97]: V / V2new
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-97-989bb1ba5705> in <module>
----> 1 V / V2new

NameError: name 'V2new' is not defined
> <ipython-input-97-989bb1ba5705>(1)<module>()
----> 1 V / V2new

ipdb> c

In [98]: V / v2new
Out[98]:
array([0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
       0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5])

In [99]: v2new / 2
Out[99]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [100]: V2
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-100-e599120f09dc> in <module>
----> 1 V2

NameError: name 'V2' is not defined
> <ipython-input-100-e599120f09dc>(1)<module>()
----> 1 V2

ipdb> c

In [101]: v2
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-101-870efcb9bdd8> in <module>
----> 1 v2

NameError: name 'v2' is not defined
> <ipython-input-101-870efcb9bdd8>(1)<module>()
----> 1 v2

ipdb>

In [102]: 2*v
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-102-9430c5c4cda0> in <module>
----> 1 2*v

NameError: name 'v' is not defined
> <ipython-input-102-9430c5c4cda0>(1)<module>()
----> 1 2*v

ipdb> c

In [103]: 2*V
Out[103]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [104]: v2new
Out[104]:
array([1.64955552, 1.20468518, 0.61676151, 1.72920675, 0.07130733,
       0.40069699, 1.18273727, 0.83032426, 1.01355366, 1.96782177,
       1.508812  , 1.37262841, 0.52283587, 0.70296943, 0.51618477,
       0.2095469 , 0.26481783, 0.63734501, 1.18896563, 0.53316181,
       1.18318943, 0.13071413, 0.17176731, 1.91373168, 1.97203373,
       1.67785419, 0.44240431, 0.85163929, 0.76661244, 0.41949393,
       1.50764967, 0.89198727, 0.56170774, 0.83449883, 1.88957059,
       1.40440266, 0.72726113, 1.04588673, 1.88591967, 1.23247343,
       0.76389478, 0.87647604, 1.22222036, 1.08845463, 0.49090808,
       0.80509085, 0.42855803, 1.32572353, 0.56509145, 0.33743572,
       1.52351444, 0.19946169, 0.87588198, 1.79130584, 0.06374476,
       1.75941477, 0.95132766, 1.06847484, 1.4858536 , 0.36459157,
       1.12886559, 1.14978662, 1.89611674, 1.47930272, 0.4426415 ,
       1.93082925, 0.21838382, 0.45302992, 0.33852386, 0.08886044,
       1.77960905, 1.75588287, 0.26555172, 1.60426459, 0.9177396 ,
       0.30862298, 1.5057633 , 0.61439042, 0.62554037, 0.6988299 ,
       1.74560637, 0.84579617, 1.32166026, 1.44114933, 1.80592017,
       0.10365144, 1.39448557, 0.9987826 , 1.5816314 , 1.52169333,
       0.56088479, 0.20023629, 1.13120871, 1.66598088, 0.88018801,
       1.11185386, 1.41805091, 0.58083968, 0.69167919, 0.01581761])

In [105]: ls
06_fileio_mpl.md   anatomy.pdf                 test1D.txt  twoD.txt  Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test2D.csv  V2.npy
100.txt            test1D.csv                  t.npy       V.npy

In [106]: np.savez?

In [107]: t
Out[107]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [108]: V
Out[108]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [109]: np.savez('Vt.npz', voltage=V, time=t)

In [110]: ls
06_fileio_mpl.md   anatomy.pdf                 test1D.txt  twoD.txt  Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test2D.csv  V2.npy    Vt.npz
100.txt            test1D.csv                  t.npy       V.npy

In [111]: t
Out[111]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [112]: v
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-112-d0aa4386ac53> in <module>
----> 1 v

NameError: name 'v' is not defined
> <ipython-input-112-d0aa4386ac53>(1)<module>()
----> 1 v

ipdb> c

In [113]: V
Out[113]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [114]: d = np.load('Vt.npz')

In [115]: d
Out[115]: <numpy.lib.npyio.NpzFile at 0x7fc649630cf8>

In [116]: d.keys
Out[116]: <bound method Mapping.keys of <numpy.lib.npyio.NpzFile object at 0x7fc649630cf8>>

In [117]: d.keys()
Out[117]: KeysView(<numpy.lib.npyio.NpzFile object at 0x7fc649630cf8>)

In [118]: list(d)
Out[118]: ['voltage', 'time']

In [119]: list(d)
Out[119]: ['voltage', 'time']

In [120]: d['voltage']
Out[120]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [121]: d['time']
Out[121]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [122]: pwd
Out[122]: '/home/mspacek/SciPyCourse2019/notes/06_fileio_mpl'

In [123]: ls
06_fileio_mpl.md   anatomy.pdf                 test1D.txt  twoD.txt  Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test2D.csv  V2.npy    Vt.npz
100.txt            test1D.csv                  t.npy       V.npy

In [124]: np.savez?

In [125]: np.savez_compressed?

In [126]: a = np.arange(10)

In [127]: a
Out[127]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [128]: ls
06_fileio_mpl.md   anatomy.pdf                 test1D.txt  twoD.txt  Vt.mat
06_fileio_mpl.pdf  ASCII-Conversion-Chart.pdf  test2D.csv  V2.npy    Vt.npz
100.txt            test1D.csv                  t.npy       V.npy

In [129]: pwd
Out[129]: '/home/mspacek/SciPyCourse2019/notes/06_fileio_mpl'

In [130]: np.savetxt('exercise.txt', a)

In [131]: np.savetxt('exercise.txt', a, fmt='%g')

In [132]: b = np.loadtxt('exercise.txt')

In [133]: b
Out[133]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8., 99.])

In [134]: b = np.loadtxt('exercise.txt', dtype=int)

In [135]: b
Out[135]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [136]: a
Out[136]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [137]: np.save('exercise.npy', a)

In [138]: c = np.load('exercise.npy')

In [139]: c
Out[139]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [140]: import matplotlib.pyplot as plt

In [141]: t = np.linspace(0, 4*np.pi, 100)

In [142]: t
Out[142]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [143]: len(t)
Out[143]: 100

In [144]: s = np.sin(t)

In [145]: s
Out[145]:
array([ 0.00000000e+00,  1.26592454e-01,  2.51147987e-01,  3.71662456e-01,
        4.86196736e-01,  5.92907929e-01,  6.90079011e-01,  7.76146464e-01,
        8.49725430e-01,  9.09631995e-01,  9.54902241e-01,  9.84807753e-01,
        9.98867339e-01,  9.96854776e-01,  9.78802446e-01,  9.45000819e-01,
        8.95993774e-01,  8.32569855e-01,  7.55749574e-01,  6.66769001e-01,
        5.67059864e-01,  4.58226522e-01,  3.42020143e-01,  2.20310533e-01,
        9.50560433e-02, -3.17279335e-02, -1.58001396e-01, -2.81732557e-01,
       -4.00930535e-01, -5.13677392e-01, -6.18158986e-01, -7.12694171e-01,
       -7.95761841e-01, -8.66025404e-01, -9.22354294e-01, -9.63842159e-01,
       -9.89821442e-01, -9.99874128e-01, -9.93838464e-01, -9.71811568e-01,
       -9.34147860e-01, -8.81453363e-01, -8.14575952e-01, -7.34591709e-01,
       -6.42787610e-01, -5.40640817e-01, -4.29794912e-01, -3.12033446e-01,
       -1.89251244e-01, -6.34239197e-02,  6.34239197e-02,  1.89251244e-01,
        3.12033446e-01,  4.29794912e-01,  5.40640817e-01,  6.42787610e-01,
        7.34591709e-01,  8.14575952e-01,  8.81453363e-01,  9.34147860e-01,
        9.71811568e-01,  9.93838464e-01,  9.99874128e-01,  9.89821442e-01,
        9.63842159e-01,  9.22354294e-01,  8.66025404e-01,  7.95761841e-01,
        7.12694171e-01,  6.18158986e-01,  5.13677392e-01,  4.00930535e-01,
        2.81732557e-01,  1.58001396e-01,  3.17279335e-02, -9.50560433e-02,
       -2.20310533e-01, -3.42020143e-01, -4.58226522e-01, -5.67059864e-01,
       -6.66769001e-01, -7.55749574e-01, -8.32569855e-01, -8.95993774e-01,
       -9.45000819e-01, -9.78802446e-01, -9.96854776e-01, -9.98867339e-01,
       -9.84807753e-01, -9.54902241e-01, -9.09631995e-01, -8.49725430e-01,
       -7.76146464e-01, -6.90079011e-01, -5.92907929e-01, -4.86196736e-01,
       -3.71662456e-01, -2.51147987e-01, -1.26592454e-01, -4.89858720e-16])

In [146]: plt.plot(t, s)
Out[146]: [<matplotlib.lines.Line2D at 0x7fc613135cc0>]

In [147]: %matplotlib
Using matplotlib backend: Qt4Agg

In [148]: plt.ion()

In [149]: plt.plot(t, s)
Out[149]: [<matplotlib.lines.Line2D at 0x7fc612f0a9e8>]

In [150]: plt.plot?

In [151]: plt.plot(t, s, marker='')
Out[151]: [<matplotlib.lines.Line2D at 0x7fc62a7b1630>]

In [152]: plt.plot?

In [153]: plt.plot(t, s, marker='.')
Out[153]: [<matplotlib.lines.Line2D at 0x7fc61312b5f8>]

In [154]: plt.plot(t, s, marker='.')
Out[154]: [<matplotlib.lines.Line2D at 0x7fc62a772eb8>]

In [155]: plt.xlim?

In [156]: plt.xlim(0, 20)
Out[156]: (0, 20)

In [157]: plt.xlim
Out[157]: <function matplotlib.pyplot.xlim(*args, **kwargs)>

In [158]: plt.ylim
Out[158]: <function matplotlib.pyplot.ylim(*args, **kwargs)>

In [159]: plt.xlabel('Time')
Out[159]: Text(0.5, 13.94444444444443, 'Time')

In [160]: plt.ylabel('STuff')
Out[160]: Text(13.944444444444445, 0.5, 'STuff')

In [161]: plt.title('Sinusoid')
Out[161]: Text(0.5, 1.0, 'Sinusoid')

In [162]: plt.savefig?

In [163]: plt.savefig('fig1.png')

In [164]: plt.plot?

In [165]: c = np.cos(t)

In [166]: plt.plot(t, c)
Out[166]: [<matplotlib.lines.Line2D at 0x7fc63e37ccc0>]

In [167]: plt.figure()
Out[167]: <Figure size 700x700 with 0 Axes>

In [168]: plt.plot(t, c)
Out[168]: [<matplotlib.lines.Line2D at 0x7fc63e3bca58>]

In [169]: plt.savefig?

In [170]: plt.close('all')

In [171]: plt.plot(t, s, label='sin')
Out[171]: [<matplotlib.lines.Line2D at 0x7fc63e2d2f98>]

In [172]: plt.plot(t, c, label='cos')
Out[172]: [<matplotlib.lines.Line2D at 0x7fc63e278940>]

In [173]: plt.legend()
Out[173]: <matplotlib.legend.Legend at 0x7fc63e2df978>

In [174]: cf()
---------------------------------------------------------
NameError               Traceback (most recent call last)
<ipython-input-174-3c7bff65af2f> in <module>
----> 1 cf()

NameError: name 'cf' is not defined
> <ipython-input-174-3c7bff65af2f>(1)<module>()
----> 1 cf()

ipdb> c

In [175]: plt.close('all')

In [176]: a = np.random.random(1000) - 0.5

In [177]: a
Out[177]:
array([ 4.07640486e-01,  4.50322645e-02,  4.02114430e-01, -2.58003677e-01,
        2.94496083e-01,  8.31901851e-02, -2.69442290e-01, -3.91053290e-01,
       -2.58589898e-01,  1.52381288e-01, -6.59232587e-02,  9.48976014e-03,
        1.28325282e-01, -3.18762315e-01, -3.63795467e-01, -4.16841990e-01,
       -2.73518483e-01,  1.30774223e-01,  3.88133881e-01, -4.38403102e-01,
       -2.00229287e-01, -2.70549610e-01, -1.69688198e-01,  3.40637077e-01,
       -8.67932900e-02,  3.89743701e-01,  2.86243365e-01, -2.49200214e-01,
        3.38788221e-01, -1.02613829e-01,  4.14007945e-01, -1.24938801e-01,
       -3.05743528e-01, -3.67507426e-01, -4.88180870e-01, -3.73465364e-01,
       -1.46016364e-01, -1.66623381e-01, -1.37990889e-01,  1.13840322e-01,
       -4.88751649e-03, -6.29341678e-02,  2.07577758e-01, -2.64368803e-01,
       -2.76370662e-02, -1.85554863e-01,  4.82190949e-01, -4.09426583e-01,
       -4.18737284e-01, -2.78074211e-01,  4.70664252e-01,  4.30571063e-01,
        2.23796949e-01, -3.88090947e-02, -1.33883515e-01, -4.45285079e-01,
        1.83082498e-01, -4.90368863e-01,  7.38391407e-02, -3.97140659e-01,
        1.44627544e-01,  1.04471869e-01,  1.89569927e-01, -3.78228995e-01,
       -2.83391923e-01,  4.82410838e-01,  3.22657767e-02, -4.21368941e-01,
        2.01180017e-01, -4.43164238e-01,  6.88081392e-02, -4.26968155e-01,
        4.52932364e-02, -1.09529790e-01,  2.20481886e-01,  1.78906548e-01,
        2.19164545e-01, -4.85197884e-01, -2.08019130e-03, -2.51744283e-01,
        3.93200752e-02,  2.15897652e-01,  3.49422238e-01, -4.05075325e-01,
       -2.34082977e-01, -3.59514577e-02,  2.83373141e-01,  9.24035238e-02,
       -1.62909580e-01,  3.80736991e-01, -1.93048205e-01,  3.92558453e-01,
       -1.96359935e-01, -8.32146958e-02,  4.17135533e-02,  4.00596081e-01,
        3.83729899e-01,  3.20357529e-04, -1.76076511e-01, -1.34973972e-01,
       -3.13246074e-01, -4.08674634e-01, -4.18258658e-01, -3.01156949e-01,
        1.99285911e-01, -3.80633688e-01,  2.71342402e-01, -3.54619916e-01,
        3.43784640e-01, -3.20649119e-01, -2.51171699e-01, -4.09293389e-01,
        1.81009493e-01, -3.64345840e-01, -3.39005760e-01, -4.92504570e-01,
       -3.55647997e-01,  3.40638697e-01, -2.02082533e-01, -1.97500226e-01,
       -3.89025888e-01, -2.08852988e-01,  2.28350652e-01, -2.99447253e-01,
        3.84821682e-01, -4.24393094e-03, -3.01782103e-01,  2.93328914e-01,
        3.77578663e-01,  4.77795074e-01,  1.97649556e-01, -3.67734529e-01,
       -2.84336259e-01,  4.72157470e-01, -1.82708684e-01, -3.55405272e-01,
       -4.90735508e-01,  3.11790623e-01, -1.99423803e-01,  1.41202103e-02,
       -3.55415950e-02,  2.75859271e-01,  3.60816493e-01, -4.10423840e-01,
       -1.21213821e-01,  1.73154981e-01,  5.19806275e-02, -3.05701517e-01,
        1.82477058e-01,  4.38822731e-01, -1.23863658e-01, -4.05652023e-01,
       -8.11332855e-02, -2.74006207e-01,  3.36977377e-02,  2.92473368e-01,
       -2.20340817e-01, -2.26507795e-01,  4.11135175e-01,  3.73456346e-01,
       -1.55054082e-01,  1.25627708e-01, -7.95394113e-02,  3.28654935e-01,
        3.21544387e-01, -4.77534134e-01,  4.75065213e-01,  2.52649125e-01,
        1.72332831e-01,  4.52281648e-01,  1.21356824e-01,  3.49963569e-01,
       -2.04404108e-01, -3.33180449e-01,  9.72970548e-02,  1.36069586e-01,
        2.18716732e-01, -1.54963899e-01, -2.75319339e-02,  6.72427323e-02,
        3.17236796e-01, -3.80474979e-01,  3.21610740e-02,  2.53317880e-01,
       -3.38824273e-01,  4.87585726e-01,  4.11853275e-01, -4.18217945e-01,
       -4.57925313e-01, -1.15123659e-01, -3.80581699e-01,  1.98066926e-01,
       -2.26495627e-01,  8.98535125e-02,  1.55324080e-01,  4.61160790e-01,
        2.71672466e-01, -4.89295817e-01, -8.08755953e-02, -1.99185304e-01,
        2.41062294e-01, -2.70869062e-01,  9.16649176e-02, -1.12148427e-01,
        1.49889191e-01,  5.12353465e-02,  1.94947398e-01, -2.61632560e-02,
        1.93030000e-01,  4.96783079e-01,  9.11410268e-02,  5.07759820e-02,
        4.76911742e-01, -3.26243590e-01, -2.96520012e-01, -1.74398268e-02,
       -4.48189217e-01,  3.91408291e-01, -1.82445174e-01,  2.39323764e-01,
       -2.00501334e-01, -2.60097448e-01, -4.90176679e-01, -1.73458181e-01,
        2.19866329e-01,  4.00118988e-01,  4.49724614e-01, -3.78843917e-01,
        2.10028715e-01,  1.15289045e-01, -3.23888656e-01,  3.79405780e-01,
        4.91285684e-01,  4.90298702e-01, -3.25112951e-01, -3.45629084e-01,
        4.45539941e-01, -4.18520158e-01,  2.09580837e-01, -4.31238946e-01,
        4.86069069e-01,  3.55243918e-01,  3.97309602e-01, -1.93526492e-01,
       -3.02618135e-01, -3.06639160e-01, -2.19892933e-01,  3.91040451e-01,
       -1.60421886e-01,  1.36809968e-01,  2.20209513e-01, -3.63609571e-01,
        7.33731215e-02,  2.15208331e-01, -7.88620894e-03, -4.78669669e-01,
       -2.25652148e-01, -1.77473364e-01, -1.33342540e-02,  4.46803448e-01,
        8.07213038e-03, -4.06777697e-01,  1.29454537e-02,  4.40692377e-01,
       -4.15268670e-01,  1.93616574e-01,  7.32116705e-03, -7.02325444e-02,
        2.82330590e-01,  2.67859871e-01, -4.41037108e-01,  4.61980007e-01,
        2.63917270e-02,  2.27093920e-01,  4.22452751e-01, -4.65571029e-01,
        9.68932603e-02, -2.65596331e-01,  1.82525967e-01, -2.05797235e-01,
       -1.89774282e-01,  1.39137810e-01,  4.84475602e-01, -5.79572384e-02,
       -3.11529957e-02, -2.99297466e-01,  8.63830068e-02,  4.35042588e-01,
       -3.22882551e-01, -4.68934445e-01,  2.88787552e-01, -4.92258159e-01,
       -2.83820912e-01, -2.54796036e-02, -4.94412293e-01,  1.79155668e-01,
        3.08030259e-01,  3.61422944e-02, -4.46317487e-01, -3.31762737e-01,
       -4.73954557e-01,  3.51877288e-01,  4.49610815e-01, -1.76712130e-01,
       -1.17356958e-01,  7.22559193e-02,  1.01965672e-01, -4.95176781e-01,
        4.56015744e-02, -1.85688136e-01,  9.90252515e-02,  9.75378512e-02,
        3.13365947e-01,  2.54001505e-01, -4.19825908e-01, -2.81996672e-02,
       -3.62577537e-01,  4.92403636e-01,  8.46161995e-03,  2.33399217e-02,
       -3.11806064e-01,  5.28576837e-03, -4.99870241e-01,  1.78188075e-01,
       -3.00100369e-01, -2.63063370e-01, -1.22594640e-01,  2.99931519e-01,
       -3.93898748e-01,  5.95783167e-02, -4.39668542e-01,  4.15674193e-01,
        4.13718198e-01, -4.32779793e-01, -4.54503126e-01, -1.58086827e-01,
       -2.33590440e-01, -2.28019462e-01, -4.81434594e-01, -2.26177945e-01,
       -4.15206182e-01, -2.14884001e-01,  3.77329042e-01,  3.44243158e-01,
        3.20783373e-01,  9.35751879e-02, -1.46673522e-01,  1.79807695e-01,
        2.62944959e-01, -2.19992167e-01,  3.68052343e-01, -1.57245145e-01,
       -2.43138393e-01,  1.09396777e-01,  4.76933077e-01,  1.89001431e-01,
        2.07981559e-01, -1.75173633e-01, -8.77831192e-02, -4.21235023e-01,
        4.69022563e-01,  1.71164878e-01, -2.26551622e-01, -1.69676001e-01,
        3.21842976e-01,  1.96203042e-01,  2.91284755e-01, -9.95531494e-02,
       -9.24275461e-02, -3.77448372e-01, -4.49402661e-01,  1.13296439e-01,
       -4.61966043e-01,  2.24610430e-02,  1.63449070e-01, -3.25166038e-02,
       -3.77955790e-01,  2.68006114e-01,  3.04439037e-01, -5.87297909e-02,
       -8.53964962e-02, -3.17628654e-01, -1.58567681e-03,  9.70037431e-02,
        2.37376316e-01, -3.88608152e-01,  4.03572271e-01,  3.66243634e-01,
       -4.57005167e-01, -4.40865902e-01,  1.24157044e-01,  4.81083345e-01,
        3.38794488e-01,  3.46900962e-01,  3.05445432e-01, -1.08704570e-01,
       -2.29590279e-01, -1.86511757e-01, -3.99411448e-01,  6.31725937e-02,
       -3.75827570e-02,  3.78513301e-01,  4.56947906e-02,  1.34107754e-01,
       -1.33209363e-01,  1.71428460e-01,  3.15221179e-01,  2.10518258e-01,
        2.21381285e-01,  3.90272505e-01,  4.12919902e-01, -3.19062914e-01,
       -1.92219267e-01, -2.36486899e-01,  8.53725693e-03, -3.52667263e-01,
        7.43651946e-02, -3.27536168e-01, -2.97763016e-01,  3.26020455e-01,
        3.89648268e-02, -4.17795514e-01,  4.24849313e-01,  2.83403214e-01,
        3.21231194e-01,  4.99986894e-01,  2.22473589e-01,  5.30525896e-02,
        3.26394727e-01, -4.86146451e-01, -3.14061841e-01,  3.16532083e-01,
       -4.75730406e-01, -4.05064397e-01,  4.18601920e-01,  1.76095673e-01,
        2.92715736e-01, -1.58162434e-01,  1.80049035e-01,  1.23339116e-02,
        4.50996728e-01, -2.17271676e-01, -2.26944674e-01,  3.90316110e-01,
        1.40305247e-02,  1.99566591e-01,  1.44535022e-01,  3.85094730e-01,
        3.29986692e-01,  2.88409168e-02,  3.95943094e-01,  3.68367402e-01,
        9.27496629e-02,  8.33460810e-02,  3.18331910e-01, -9.18080752e-02,
        4.38938848e-02,  2.58686212e-01, -2.51752110e-01, -4.55812512e-01,
        3.87381638e-01,  7.38538256e-02,  1.43640918e-01, -7.36816077e-03,
        1.41276336e-01, -1.05109445e-01,  1.96321154e-01, -1.31801889e-02,
       -3.38517073e-01,  1.91398183e-01, -1.86643501e-01, -9.91766772e-02,
       -6.34304017e-02, -3.01953567e-01,  1.54412260e-02,  3.93083296e-01,
       -4.69183424e-02,  3.38566444e-03,  1.61222283e-01,  4.35830573e-02,
        1.66803085e-01, -8.14051642e-02, -3.13724518e-01,  3.59543221e-01,
       -9.29906862e-02,  3.07326891e-02, -1.00978696e-01, -2.43936630e-02,
       -8.17801523e-02, -3.89239789e-01, -3.73623480e-01, -4.01203439e-01,
        1.49596985e-01, -2.67736262e-01, -4.16018449e-01,  2.97070873e-01,
       -2.50775452e-01,  3.20826249e-01, -1.67947159e-01, -3.51133769e-01,
       -1.09795459e-01, -1.77754669e-01,  3.89969638e-01, -3.63610876e-01,
       -2.49948877e-02, -3.46007869e-02, -2.15566990e-02, -3.49353181e-01,
        2.50276143e-01, -1.15314489e-02, -1.31562341e-01,  3.32457966e-01,
       -2.17342473e-01, -1.43624839e-01,  2.11462929e-01, -1.14360233e-01,
        1.30305373e-01, -7.31743033e-02,  2.83842340e-01, -2.04006409e-01,
        4.93928945e-01, -2.78090974e-01,  1.73364715e-01,  4.92677612e-01,
       -4.14720148e-01, -1.68785879e-01,  2.12683979e-01, -3.43953386e-01,
        4.54620550e-02, -3.34756984e-01,  4.03929548e-01, -4.40513405e-01,
        1.18754825e-01, -3.36366348e-01, -1.32173410e-01, -1.35239776e-01,
        2.15479169e-01,  2.57013024e-02,  3.80312626e-01,  2.34987733e-01,
       -1.18060816e-01,  2.46473889e-01,  2.21356913e-01,  4.85633667e-01,
       -8.44606820e-02,  2.17357848e-01,  1.33773374e-01,  2.08839972e-01,
        4.95592900e-01, -1.40707007e-01, -1.22714839e-01, -4.12606580e-01,
        3.15677997e-01, -1.17247744e-01,  2.98349237e-01, -3.86446806e-01,
       -2.88492526e-01, -2.79105423e-01, -1.02719718e-01,  3.19947243e-01,
        4.88195417e-01, -4.93816465e-01,  2.70981519e-01, -4.12040693e-01,
        3.38825345e-01, -1.09638941e-01,  4.05498551e-01, -2.73446781e-02,
        3.37239248e-01, -1.74334317e-01,  1.94530560e-01, -4.98135786e-01,
        2.93886594e-01,  3.79063194e-01,  3.53790506e-01, -4.88024258e-01,
        2.93539111e-01, -4.66203781e-01, -3.04088183e-01,  4.14631827e-01,
       -5.45807552e-02, -1.11437801e-01, -2.86758300e-01, -3.09070166e-01,
        4.71768984e-01, -2.73026355e-01, -3.60964939e-01,  2.59710035e-01,
       -4.99089573e-02,  2.78247153e-01,  4.69457913e-01, -9.03905966e-02,
       -2.36139450e-01,  4.48767148e-01,  8.08668661e-02,  4.36382698e-02,
       -2.44656449e-02,  2.40744545e-01, -1.65403926e-01,  2.43443914e-01,
       -3.12284162e-01, -3.35089748e-01, -1.67820521e-01,  4.47097201e-01,
        4.53243377e-01,  1.17344791e-01,  3.35883798e-01,  4.61604546e-01,
       -2.83245985e-01,  7.34512334e-03,  4.08010773e-01, -2.30751956e-01,
        3.37509461e-01,  2.79607182e-01, -3.00502292e-01, -1.14988665e-01,
        2.48482716e-01, -1.63432045e-01,  2.85698695e-01, -8.09477436e-03,
        3.12890985e-01,  3.81423058e-01, -7.46222450e-03,  5.59530420e-02,
        2.91763017e-01, -1.42154208e-01, -1.16268470e-01, -3.71423315e-01,
        4.59535023e-01,  2.64913000e-01,  1.07991766e-01, -4.36376395e-01,
        4.89092387e-01,  1.67262270e-01, -2.75099792e-01, -1.76595461e-01,
        1.89748097e-01, -1.31119166e-01, -1.46651315e-01,  2.45382553e-01,
        1.91134390e-01, -4.36647088e-02,  4.46663015e-01,  3.38561883e-01,
        4.52024739e-02, -1.01511870e-01, -3.13430258e-01, -1.44412452e-01,
        2.75728269e-01, -3.75972228e-01,  1.01689811e-01, -4.63745393e-01,
        2.47873624e-02,  2.90136051e-01, -3.84263891e-01,  1.70901825e-01,
        1.03097645e-01,  1.62989418e-01, -3.38857197e-01, -4.76261164e-01,
        2.08477235e-01,  3.01441545e-02, -8.90538312e-02, -2.50573806e-01,
       -1.45786204e-01, -3.31994078e-01, -2.61200046e-01,  3.04594337e-01,
       -4.54419460e-01, -1.65625943e-01,  1.56497123e-01,  2.47793489e-01,
       -8.26999590e-02,  3.25506555e-01, -3.94006477e-02, -2.44486624e-01,
       -3.78889601e-01, -5.97755104e-02, -7.99201948e-02,  2.16956531e-01,
        2.09871607e-01,  3.34852522e-01, -4.51317131e-01, -4.14241297e-01,
       -1.17353461e-01,  6.04040449e-02,  7.95207823e-02,  4.63227438e-01,
        1.12413245e-01, -2.41692370e-01, -2.89378447e-01,  4.85508637e-02,
       -3.83549739e-01,  1.94969832e-01,  7.65278815e-02,  2.93716498e-01,
        2.47967745e-01,  5.39622600e-03, -4.64421820e-01, -4.37513383e-01,
        2.23844282e-01, -3.95997599e-01,  7.89867126e-02, -5.85029328e-03,
       -2.34347826e-01, -2.69812810e-01, -4.90408781e-02, -3.46947186e-01,
        8.03005445e-02,  4.70051940e-02, -2.38021027e-01, -4.43939990e-01,
        4.12554389e-01, -4.46937075e-01, -2.82178597e-01,  7.67915205e-02,
       -1.58443375e-01,  2.27560971e-01, -1.07884014e-01, -1.05552339e-01,
        2.32347554e-01,  2.27079000e-01, -4.88396659e-02, -1.16963354e-01,
       -4.87668409e-02,  1.53057193e-01,  1.61917609e-01,  1.91751138e-01,
        1.63648969e-01,  2.22366032e-01, -1.11075641e-01, -1.18604555e-01,
       -1.06616620e-01,  2.42362912e-01,  3.62793436e-02,  4.01403732e-01,
        4.93586150e-01,  4.95218962e-02, -5.13453704e-02,  2.37878777e-01,
       -4.05933521e-01, -4.94479040e-01,  1.65149270e-02,  3.90591625e-01,
        3.62341895e-02,  3.78054182e-01,  3.30480727e-02, -1.91831010e-01,
        2.45453630e-01, -2.20977802e-02, -3.96472116e-01, -4.76858859e-01,
       -3.42666001e-01,  4.63093180e-02, -2.09473823e-01, -1.10725514e-01,
       -4.13474159e-01,  1.54513651e-01,  1.81802809e-03,  2.24150557e-01,
       -3.67732504e-01, -5.88111851e-02,  2.29246103e-01, -5.42923222e-02,
       -3.80667875e-01, -4.22461815e-01,  4.14657220e-01,  1.32250681e-01,
        4.64294946e-01, -2.85174444e-01, -1.94276308e-01,  5.89760597e-02,
       -8.63451273e-02,  4.77336347e-01, -9.21099117e-02,  3.10642925e-01,
        2.11272566e-01, -4.07366792e-01, -1.92366424e-01,  3.38701997e-01,
        2.08449064e-02,  9.45893683e-02, -3.39378524e-01,  2.13041996e-01,
        3.57314618e-01,  3.85312962e-01, -7.04445345e-02,  1.38899379e-01,
       -3.53063498e-01,  2.07058763e-02, -1.69243429e-01, -3.59177023e-01,
        1.95661786e-01, -2.38133157e-01,  3.86425181e-01, -2.65041616e-01,
       -6.19699644e-02, -4.68419257e-01, -3.36700938e-02, -9.02337304e-02,
       -2.02691176e-01,  2.95445812e-02, -7.26975648e-02, -4.04735481e-01,
        3.07147332e-01, -5.35329053e-02,  4.26933622e-01, -2.38715137e-02,
       -1.53816135e-01,  2.90995772e-01, -4.04815890e-01, -1.64638717e-01,
       -1.11916837e-01, -4.89951537e-01, -1.35775305e-01, -4.89922340e-01,
       -2.15307078e-01,  9.18453166e-02,  9.74860378e-03, -1.66953154e-01,
        2.77481386e-01, -1.99947709e-01,  4.02675435e-01,  5.57778201e-02,
       -1.18118063e-01,  2.78384575e-01,  1.05519166e-01,  1.31631351e-01,
       -4.28363726e-02, -4.80057180e-02,  3.07529259e-01, -4.44103633e-01,
        4.09020768e-01, -1.67178809e-01, -2.98645039e-01, -2.19131323e-01,
       -2.25209104e-01,  3.35371809e-01,  3.89577504e-01, -3.70071415e-01,
       -2.69131508e-02, -3.01761210e-01,  4.29953142e-01, -1.96139523e-02,
       -4.22864945e-01, -2.75843042e-01, -2.04920569e-02,  4.77860289e-01,
        3.52149053e-01, -2.38777570e-02,  9.14152865e-02,  2.52273137e-01,
        3.49037595e-01, -6.23762828e-02,  2.68440172e-01,  4.09835046e-01,
        5.05604303e-02,  1.41148347e-01,  1.20344392e-01, -3.90939101e-01,
       -1.29020837e-02,  3.02348413e-02,  8.16668494e-02, -3.18527283e-01,
        2.25651482e-01,  6.33114184e-02, -3.91772129e-01,  8.34823128e-02,
        3.68484533e-01, -3.56984262e-01, -2.80723232e-01, -3.67948108e-01,
        4.08757335e-01, -1.77185559e-01, -3.52027425e-01, -4.54873735e-01,
        3.17452161e-01,  3.95516474e-01,  1.47327337e-01, -4.27815763e-01,
        2.89646958e-01,  1.61405284e-02,  2.65686310e-03, -4.12179592e-01,
        2.37258829e-01,  4.86363741e-01,  6.49963600e-02,  3.94010958e-01,
       -3.46007928e-01, -8.31262845e-02, -3.36266872e-01, -1.32271522e-01,
        2.05059074e-01,  4.14681577e-01,  3.68701354e-01, -2.65031955e-01,
       -3.94153788e-01,  2.79263514e-01, -2.80976627e-02,  3.31118402e-01,
       -4.14364495e-01,  7.45994194e-02, -1.64535718e-01,  3.35739497e-01,
        3.48014890e-01, -3.25340537e-01,  2.14681535e-01,  3.81888708e-01,
        2.48987595e-01,  4.07139809e-01,  2.80900573e-01, -1.10626804e-01,
        2.57004847e-01,  3.75850814e-01, -2.69775637e-01,  3.99130015e-01,
       -1.34533933e-01,  1.11323270e-01,  4.85768319e-01, -9.36105312e-02,
        2.46576727e-01, -3.66826506e-01,  1.62772209e-01,  4.03513333e-01,
       -2.40669360e-01,  2.01911141e-01, -3.98118819e-01, -3.60193573e-01,
       -7.76688282e-02,  1.10941445e-01, -3.88029148e-01,  3.56884557e-01,
        3.08217048e-01,  4.50757855e-02, -3.61321975e-01,  4.23273441e-01,
        1.56022043e-01, -2.58574077e-01,  1.37587281e-01,  1.75527817e-01,
       -1.79751562e-01, -6.85994841e-02,  1.42164236e-01, -4.77935499e-01,
       -2.03471219e-01,  2.80398423e-01, -1.46530540e-01, -2.47269348e-01,
        4.55638077e-01,  2.74958750e-01, -1.15217651e-03,  1.24937948e-01,
       -2.55480122e-01,  6.99427076e-02, -3.89780587e-01, -2.15475233e-01,
        3.47724488e-01,  3.79644014e-01,  3.63135169e-01, -3.06783961e-01,
       -4.77132794e-01, -2.17748684e-01, -2.93777239e-01, -2.90441235e-02,
       -5.43694951e-02,  2.33219446e-01,  3.77428863e-02, -4.56728440e-01,
        1.17584644e-02,  4.25940052e-01,  3.39994446e-01,  3.75796025e-01,
       -8.50221009e-02, -3.04446215e-01, -1.89433151e-02, -4.43174777e-02,
       -3.84408990e-01,  4.79754490e-01, -3.63383777e-01,  6.25901588e-02,
        1.35926031e-01,  2.36844335e-01, -1.97291968e-01,  3.27054835e-01,
       -1.28207921e-01,  3.90983476e-02, -3.95761709e-01, -4.83511120e-01,
       -1.42584504e-01,  4.07253017e-01, -4.92147956e-01, -4.58070418e-01,
       -2.65022852e-01,  3.14337837e-02,  4.43733441e-01,  4.31242969e-02,
        1.37174784e-01, -4.59227024e-01,  4.26015855e-01, -3.13444340e-01])

In [178]: plt.hist(a)
Out[178]:
(array([ 99., 107.,  91., 107.,  97., 109.,  92., 107., 103.,  88.]),
 array([-4.99870241e-01, -3.99884528e-01, -2.99898814e-01, -1.99913101e-01,
        -9.99273871e-02,  5.83264621e-05,  1.00044040e-01,  2.00029754e-01,
         3.00015467e-01,  4.00001181e-01,  4.99986894e-01]),
 <a list of 10 Patch objects>)

In [179]: plt.hist(a, bins=100)
Out[179]:
(array([14.,  7.,  8.,  7., 10., 11.,  6.,  6., 18., 12., 11., 13., 10.,
        14.,  9.,  6., 12.,  7., 11., 14.,  6., 10., 10., 12.,  9.,  6.,
         8., 11.,  8., 11., 11.,  7., 10., 16.,  7., 10., 11.,  6., 17.,
        12.,  9., 14.,  7.,  6.,  9.,  9.,  9., 17.,  7., 10., 13.,  8.,
         9., 15., 16.,  9.,  8., 10.,  8., 13.,  7.,  8.,  6., 13.,  9.,
         6.,  8., 12.,  8., 15.,  9., 15., 15.,  8., 12.,  8.,  5., 11.,
        10., 14.,  7., 11., 11., 14., 10.,  7.,  7., 10., 14., 12., 16.,
        11.,  7.,  3.,  9.,  5.,  7., 10., 11.,  9.]),
 array([-4.99870241e-01, -4.89871670e-01, -4.79873099e-01, -4.69874527e-01,
        -4.59875956e-01, -4.49877384e-01, -4.39878813e-01, -4.29880242e-01,
        -4.19881670e-01, -4.09883099e-01, -3.99884528e-01, -3.89885956e-01,
        -3.79887385e-01, -3.69888814e-01, -3.59890242e-01, -3.49891671e-01,
        -3.39893100e-01, -3.29894528e-01, -3.19895957e-01, -3.09897386e-01,
        -2.99898814e-01, -2.89900243e-01, -2.79901671e-01, -2.69903100e-01,
        -2.59904529e-01, -2.49905957e-01, -2.39907386e-01, -2.29908815e-01,
        -2.19910243e-01, -2.09911672e-01, -1.99913101e-01, -1.89914529e-01,
        -1.79915958e-01, -1.69917387e-01, -1.59918815e-01, -1.49920244e-01,
        -1.39921672e-01, -1.29923101e-01, -1.19924530e-01, -1.09925958e-01,
        -9.99273871e-02, -8.99288157e-02, -7.99302444e-02, -6.99316730e-02,
        -5.99331017e-02, -4.99345303e-02, -3.99359590e-02, -2.99373876e-02,
        -1.99388162e-02, -9.94024489e-03,  5.83264621e-05,  1.00568978e-02,
         2.00554692e-02,  3.00540405e-02,  4.00526119e-02,  5.00511832e-02,
         6.00497546e-02,  7.00483259e-02,  8.00468973e-02,  9.00454687e-02,
         1.00044040e-01,  1.10042611e-01,  1.20041183e-01,  1.30039754e-01,
         1.40038325e-01,  1.50036897e-01,  1.60035468e-01,  1.70034039e-01,
         1.80032611e-01,  1.90031182e-01,  2.00029754e-01,  2.10028325e-01,
         2.20026896e-01,  2.30025468e-01,  2.40024039e-01,  2.50022610e-01,
         2.60021182e-01,  2.70019753e-01,  2.80018324e-01,  2.90016896e-01,
         3.00015467e-01,  3.10014038e-01,  3.20012610e-01,  3.30011181e-01,
         3.40009753e-01,  3.50008324e-01,  3.60006895e-01,  3.70005467e-01,
         3.80004038e-01,  3.90002609e-01,  4.00001181e-01,  4.09999752e-01,
         4.19998323e-01,  4.29996895e-01,  4.39995466e-01,  4.49994037e-01,
         4.59992609e-01,  4.69991180e-01,  4.79989751e-01,  4.89988323e-01,
         4.99986894e-01]),
 <a list of 100 Patch objects>)

In [180]: plt.figure()
Out[180]: <Figure size 700x700 with 0 Axes>

In [181]: plt.hist(a, bins=100)
Out[181]:
(array([14.,  7.,  8.,  7., 10., 11.,  6.,  6., 18., 12., 11., 13., 10.,
        14.,  9.,  6., 12.,  7., 11., 14.,  6., 10., 10., 12.,  9.,  6.,
         8., 11.,  8., 11., 11.,  7., 10., 16.,  7., 10., 11.,  6., 17.,
        12.,  9., 14.,  7.,  6.,  9.,  9.,  9., 17.,  7., 10., 13.,  8.,
         9., 15., 16.,  9.,  8., 10.,  8., 13.,  7.,  8.,  6., 13.,  9.,
         6.,  8., 12.,  8., 15.,  9., 15., 15.,  8., 12.,  8.,  5., 11.,
        10., 14.,  7., 11., 11., 14., 10.,  7.,  7., 10., 14., 12., 16.,
        11.,  7.,  3.,  9.,  5.,  7., 10., 11.,  9.]),
 array([-4.99870241e-01, -4.89871670e-01, -4.79873099e-01, -4.69874527e-01,
        -4.59875956e-01, -4.49877384e-01, -4.39878813e-01, -4.29880242e-01,
        -4.19881670e-01, -4.09883099e-01, -3.99884528e-01, -3.89885956e-01,
        -3.79887385e-01, -3.69888814e-01, -3.59890242e-01, -3.49891671e-01,
        -3.39893100e-01, -3.29894528e-01, -3.19895957e-01, -3.09897386e-01,
        -2.99898814e-01, -2.89900243e-01, -2.79901671e-01, -2.69903100e-01,
        -2.59904529e-01, -2.49905957e-01, -2.39907386e-01, -2.29908815e-01,
        -2.19910243e-01, -2.09911672e-01, -1.99913101e-01, -1.89914529e-01,
        -1.79915958e-01, -1.69917387e-01, -1.59918815e-01, -1.49920244e-01,
        -1.39921672e-01, -1.29923101e-01, -1.19924530e-01, -1.09925958e-01,
        -9.99273871e-02, -8.99288157e-02, -7.99302444e-02, -6.99316730e-02,
        -5.99331017e-02, -4.99345303e-02, -3.99359590e-02, -2.99373876e-02,
        -1.99388162e-02, -9.94024489e-03,  5.83264621e-05,  1.00568978e-02,
         2.00554692e-02,  3.00540405e-02,  4.00526119e-02,  5.00511832e-02,
         6.00497546e-02,  7.00483259e-02,  8.00468973e-02,  9.00454687e-02,
         1.00044040e-01,  1.10042611e-01,  1.20041183e-01,  1.30039754e-01,
         1.40038325e-01,  1.50036897e-01,  1.60035468e-01,  1.70034039e-01,
         1.80032611e-01,  1.90031182e-01,  2.00029754e-01,  2.10028325e-01,
         2.20026896e-01,  2.30025468e-01,  2.40024039e-01,  2.50022610e-01,
         2.60021182e-01,  2.70019753e-01,  2.80018324e-01,  2.90016896e-01,
         3.00015467e-01,  3.10014038e-01,  3.20012610e-01,  3.30011181e-01,
         3.40009753e-01,  3.50008324e-01,  3.60006895e-01,  3.70005467e-01,
         3.80004038e-01,  3.90002609e-01,  4.00001181e-01,  4.09999752e-01,
         4.19998323e-01,  4.29996895e-01,  4.39995466e-01,  4.49994037e-01,
         4.59992609e-01,  4.69991180e-01,  4.79989751e-01,  4.89988323e-01,
         4.99986894e-01]),
 <a list of 100 Patch objects>)

In [182]: plt.figure()
Out[182]: <Figure size 700x700 with 0 Axes>

In [183]: plt.hist(a, bins=20)
Out[183]:
(array([46., 53., 57., 50., 47., 44., 51., 56., 45., 52., 61., 48., 43.,
        49., 59., 48., 53., 50., 46., 42.]),
 array([-4.99870241e-01, -4.49877384e-01, -3.99884528e-01, -3.49891671e-01,
        -2.99898814e-01, -2.49905957e-01, -1.99913101e-01, -1.49920244e-01,
        -9.99273871e-02, -4.99345303e-02,  5.83264621e-05,  5.00511832e-02,
         1.00044040e-01,  1.50036897e-01,  2.00029754e-01,  2.50022610e-01,
         3.00015467e-01,  3.50008324e-01,  4.00001181e-01,  4.49994037e-01,
         4.99986894e-01]),
 <a list of 20 Patch objects>)

In [184]: np.sqrt(1000)
Out[184]: 31.622776601683793

In [185]: plt.hist?

In [186]: plt.close('all')

In [187]: plt.hist(a, bins='auto')
Out[187]:
(array([ 89.,  95.,  85.,  90.,  96., 101.,  83.,  99.,  87., 102.,  73.]),
 array([-0.49987024, -0.40897414, -0.31807803, -0.22718193, -0.13628583,
        -0.04538973,  0.04550638,  0.13640248,  0.22729858,  0.31819469,
         0.40909079,  0.49998689]),
 <a list of 11 Patch objects>)

In [188]: plt.hist(a, bins=np.arange([-1, 1, 0.1]))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-188-9a9b964aa8f5> in <module>
----> 1 plt.hist(a, bins=np.arange([-1, 1, 0.1]))

TypeError: unsupported operand type(s) for -: 'list' and 'int'
> <ipython-input-188-9a9b964aa8f5>(1)<module>()
----> 1 plt.hist(a, bins=np.arange([-1, 1, 0.1]))

ipdb> c

In [189]: plt.hist(a, bins=np.arange(-1, 1, 0.1))
Out[189]:
(array([  0.,   0.,   0.,   0.,   0.,  99., 107.,  90., 108.,  97., 109.,
         92., 107., 103.,  88.,   0.,   0.,   0.,   0.]),
 array([-1.00000000e+00, -9.00000000e-01, -8.00000000e-01, -7.00000000e-01,
        -6.00000000e-01, -5.00000000e-01, -4.00000000e-01, -3.00000000e-01,
        -2.00000000e-01, -1.00000000e-01, -2.22044605e-16,  1.00000000e-01,
         2.00000000e-01,  3.00000000e-01,  4.00000000e-01,  5.00000000e-01,
         6.00000000e-01,  7.00000000e-01,  8.00000000e-01,  9.00000000e-01]),
 <a list of 19 Patch objects>)

In [190]: plt.scatter
Out[190]: <function matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)>

In [191]: plt.errorbar
Out[191]: <function matplotlib.pyplot.errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None, capsize=None, barsabove=False, lolims=False, uplims=False, xlolims=False, xuplims=False, errorevery=1, capthick=None, *, data=None, **kwargs)>

In [192]: plt.bar
Out[192]: <function matplotlib.pyplot.bar(x, height, width=0.8, bottom=None, *, align='center', data=None, **kwargs)>

In [193]: t = np.arange(0, 4*np.pi, 0.1)

In [194]: s = 2*np.sin(t)

In [195]: c = np.cost(t) + 2
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-195-8d521d7adb89> in <module>
----> 1 c = np.cost(t) + 2

AttributeError: module 'numpy' has no attribute 'cost'
> <ipython-input-195-8d521d7adb89>(1)<module>()
----> 1 c = np.cost(t) + 2

ipdb> c

In [196]: c = np.cos(t) + 2

In [197]: plt.plot(t, s)
Out[197]: [<matplotlib.lines.Line2D at 0x7fc62a85efd0>]

In [198]: plt.plot(t, c)
Out[198]: [<matplotlib.lines.Line2D at 0x7fc62a81bbe0>]

In [199]: plt.title('something')
Out[199]: Text(0.5, 1.0, 'something')

In [200]: plt.xlabel('time (s)')
Out[200]: Text(0.5, 13.94444444444443, 'time (s)')

In [201]: plt.ylabel('position')
Out[201]: Text(13.944444444444445, 0.5, 'position')

In [202]: plt.figure()
Out[202]: <Figure size 700x700 with 0 Axes>

In [203]: plt.plot(t, s, label='sin')
Out[203]: [<matplotlib.lines.Line2D at 0x7fc610f75a58>]

In [204]: plt.plot(t, c, label='cos')
Out[204]: [<matplotlib.lines.Line2D at 0x7fc62a6e7f98>]

In [205]: plt.legend()
Out[205]: <matplotlib.legend.Legend at 0x7fc62a822978>

In [206]:

In [206]:

In [206]:

In [206]: ls
06_fileio_mpl.md   ASCII-Conversion-Chart.pdf  fig1.png      test2D.csv  V.npy
06_fileio_mpl.pdf  exercise.npy                Figure_1.png  t.npy       Vt.mat
100.txt            exercise.py                 test1D.csv    twoD.txt    Vt.npz
anatomy.pdf        exercise.txt                test1D.txt    V2.npy

In [207]: run exercise.py
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~/SciPyCourse2019/notes/06_fileio_mpl/exercise.py in <module>
      4 t = np.arange(0, 4*np.pi, 0.1)
      5 s = 2*np.sin(t)
----> 6 c = np.cost(t) + 2
      7
      8 plt.figure()

AttributeError: module 'numpy' has no attribute 'cost'
> /home/mspacek/SciPyCourse2019/notes/06_fileio_mpl/exercise.py(6)<module>()
      4 t = np.arange(0, 4*np.pi, 0.1)
      5 s = 2*np.sin(t)
----> 6 c = np.cost(t) + 2
      7
      8 plt.figure()

ipdb> c

In [208]: run exercise.py

In [209]: plt.show()

In [210]: run exercise.py

In [211]: run exercise.py

In [212]: plt.close('all')

In [213]:
